.template 0
#   Copyright (C) 2015-2019 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains API for Java wrapper generation.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"

# ---------------------------------------------------------------------------
#   Return name of the C headers context module
# ---------------------------------------------------------------------------
function java_derive_h_context_module_name (java_project)
    check_arguments (my, "java_project", my)

    return "$(my.java_project.name:Pascal)JNI_h"
endfunction

# ---------------------------------------------------------------------------
#   Obtain H module.
# ---------------------------------------------------------------------------
function java_obtain_h_module (java_project)
    my.h_module_name = java_derive_h_context_module_name (my.java_project)
    return my.java_project->java_module(java_module.name = my.h_module_name)?
endfunction

# ---------------------------------------------------------------------------
#   Create entity <c_return/> from the entity <argument/>.
# ---------------------------------------------------------------------------
function java_create_h_return_from_argument (class, method, argument, destination, java_project, meta)
    check_arguments (my, "class, method, argument, destination, java_project, meta", my)

    assert_attributes (my.argument, "name", my)

    new c_return to my.destination
        .name = java_derive_instance_name (my.argument)
        java_map_attr_access (c_return, my.argument)
        java_map_c_instance_type (c_return, my.argument)
        c_return.was_argument = "1"

        return c_return
    endnew
endfunction

.endtemplate

<class name="error" context="public" lifecycle="none">
    Error context.
    Can be used for sequential operations, i.e. parsers, to accumulate error.
    In this way operation is successful if all steps are successful, otherwise
    last occurred error code can be obtained.

    <property name="status" enum="status"/>

    <method name="reset">
        Reset context to the "no error" state.
    </method>

    <method name="update" visibility="private">
        Update context with given status.
        If status is "success" then do nothing.

        <argument name="status" enum="status"/>
    </method>

    <macros name="safe update">
        Perform update only if context defined, otherwise log error.

        <code>
            #define .(c_class_error_macros_safe_update) (CTX, ERR)
                do {
                    if (NULL != (CTX)) {
                        .(c_class_error_method_update) ((CTX), (ERR));
                    } else {
                        /* TODO: Log this error, when logging will be added. */
                    }
                } while (false)
        </code>
    </macros>

    <method name="has error" is_const="1">
        Return true if status is not "success".

        <return type="boolean"/>
    </method>

    <method name="status" is_const="1">
        Return error code.

        <return enum="status"/>
    </method>
</class>

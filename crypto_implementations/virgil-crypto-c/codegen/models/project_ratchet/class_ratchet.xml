<class name="ratchet" context="internal" scope="internal">

    <require interface="private key" project="foundation"/>
    <require interface="public key" project="foundation"/>

    <require impl="sha512" project="foundation" scope="private"/>
    <require impl="hmac" project="foundation" scope="private"/>
    <require impl="hkdf" project="foundation" scope="private"/>
    <require module="buffer defs" scope="private" project="common"/>

    <require module="ratchet typedefs" scope="public"/>

    <require class="ratchet pb utils" scope="context"/>
    <require class="ratchet common hidden" scope="context"/>
    <require class="ratchet chain key" scope="private"/>
    <require class="ratchet receiver chain" scope="private"/>
    <require module="ratchet message defs" scope="private"/>
    <require class="ratchet keys" scope="context"/>

    <require header="vscr_RatchetSession.pb.h" scope="public"/>
    <require header="vscr_RatchetMessage.pb.h" scope="public"/>
    <require header="pb_decode.h" scope="public"/>
    <require header="pb_encode.h" scope="public"/>

    <require header="ed25519/ed25519.h" scope="private"/>

    <dependency name="rng" interface="random" project="foundation" has_observers="1"/>
    <property name="ratchet key utils" class="ratchet key utils"/>
    <property name="ratchet keys" class="ratchet keys"/>
    <property name="round5" class="round5" project="foundation"/>
    <property name="enable post quantum" type="boolean"/>
    <property name="cipher" class="ratchet cipher" access="readwrite"/>
    <property name="padding" class="message padding" project="foundation" access="readwrite"/>
    <property name="sender chain" class="ratchet sender chain" access="readwrite"/>
    <property name="prev sender chain count" type="unsigned" size="4" access="readwrite"/>
    <property name="receiver chain" class="ratchet receiver chain" access="readwrite"/>
    <property name="skipped messages" class="ratchet skipped messages" access="readwrite"/>
    <property name="root key" class="vscr_ratchet_symmetric_key_t" is_reference="0" library="internal" access="readwrite"/>

    <method name="initiate">
        <argument name="shared key" class="vscr_ratchet_symmetric_key_t" is_reference="0" library="internal"/>
        <argument name="receiver long term public key first" class="vscr_ratchet_public_key_t" is_reference="0" library="internal"/>
        <argument name="receiver long term public key second" interface="public key" project="foundation"/>
        <argument name="enable post quantum" type="boolean"/>

        <return enum="status"/>
    </method>

    <method name="respond">
        <argument name="shared key" class="vscr_ratchet_symmetric_key_t" is_reference="0" library="internal"/>
        <argument name="receiver long term private key first" class="vscr_ratchet_private_key_t" is_reference="0" library="internal"/>
        <argument name="receiver long term private key second" interface="private key" project="foundation"/>
        <argument name="message" class="vscr_RegularMessage" library="nanopb" access="readonly"/>
        <argument name="regular message header" class="vscr_RegularMessageHeader" library="nanopb" access="readonly"/>
        <argument name="enable post quantum" type="boolean"/>

        <return enum="status"/>
    </method>

    <method name="encrypt len">
        <argument name="plain text len" type="size"/>

        <return type="size"/>
    </method>

    <method name="encrypt">
        <argument name="plain text" class="data"/>
        <argument name="regular message" class="vscr_RegularMessage" library="nanopb" access="readwrite"/>
        <argument name="regular message header" class="vscr_RegularMessageHeader" library="nanopb" access="readwrite"/>

        <return enum="status"/>
    </method>

    <method name="decrypt len">
        <argument name="cipher text len" type="size"/>

        <return type="size"/>
    </method>

    <method name="decrypt">
        <argument name="regular message" class="vscr_RegularMessage" library="nanopb" access="readonly"/>
        <argument name="regular message header" class="vscr_RegularMessageHeader" library="nanopb" access="readonly"/>
        <argument name="plain text" class="buffer">
            <length method="decrypt len">
                <proxy argument="cipher text" to="cipher text len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>

    <method name="decrypt for existing chain" declaration="private">
        <argument name="chain key" class="ratchet chain key"/>
        <argument name="message" class="vscr_RegularMessage" library="nanopb" access="readonly"/>
        <argument name="regular message header" class="vscr_RegularMessageHeader" library="nanopb" access="readonly"/>
        <argument name="buffer" class="buffer"/>

        <return enum="status"/>
    </method>

    <method name="generate sender chain keypair" declaration="private">
        <argument name="sender chain" class="ratchet sender chain" access="readwrite"/>

        <return enum="status"/>
    </method>

    <method name="generate skipped keys" declaration="private">
        <argument name="receiver chain" class="ratchet receiver chain" access="readwrite"/>
        <argument name="counter" type="unsigned" size="4"/>

        <return enum="status"/>
    </method>

    <method name="serialize" is_const="1">
        <argument name="ratchet pb" class="vscr_Ratchet" library="nanopb" access="readwrite"/>
    </method>

    <method name="deserialize" is_static="1">
        <argument name="ratchet pb" class="vscr_Ratchet" library="nanopb"/>
        <argument name="ratchet" class="self" access="readwrite"/>
        <return enum="status"/>
    </method>

</class>

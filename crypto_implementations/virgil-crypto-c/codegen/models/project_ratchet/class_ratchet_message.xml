<class name="ratchet message" context="private">
    Class represents ratchet message

    <require class="ratchet common hidden" scope="private"/>
    <require class="ratchet common" scope="private"/>

    <require impl="sha512" project="foundation" scope="private"/>
    <require module="buffer defs" scope="private" project="common"/>

    <require header="vscr_RatchetMessage.pb.h" scope="context"/>
    <require header="pb_decode.h" scope="private"/>
    <require header="pb_encode.h" scope="private"/>

    <property name="message pb" class="vscr_Message" library="nanopb" access="readwrite" is_reference="0"/>
    <property name="header pb" class="vscr_RegularMessageHeader" library="nanopb" access="readwrite" is_reference="0"/>

    <method name="get type" is_const="1">
        Returns message type.

        <return enum="msg type">
            Message type.
        </return>
    </method>

    <method name="get counter" is_const="1">
        Returns message counter in current asymmetric ratchet round.

        <return type="unsigned" size="4">
            Message counter.
        </return>
    </method>

    <method name="get sender identity key id">
        Returns long-term public key, if message is prekey message.

        <return class="data" access="readwrite">
            Long-term public key, if message is prekey message.
        </return>
    </method>

    <method name="get receiver identity key id">
        Returns long-term public key, if message is prekey message.

        <return class="data" access="readwrite">
            Long-term public key, if message is prekey message.
        </return>
    </method>

    <method name="get receiver long term key id">
        Returns long-term public key, if message is prekey message.

        <return class="data" access="readwrite">
            Long-term public key, if message is prekey message.
        </return>
    </method>

    <method name="get receiver one time key id">
        Returns one-time public key, if message is prekey message and if one-time key is present, empty result otherwise.

        <return class="data" access="readwrite">
            One-time public key, if message is prekey message and if one-time key is present, empty result otherwise.
        </return>
    </method>

    <method name="serialize len" is_const="1">
        Buffer len to serialize this class.

        <return type="size">
            Buffer len to serialize this class.
        </return>
    </method>

    <method name="serialize" is_const="1">
        Serializes instance.

        <argument name="output" class="buffer">
            Buffer for result. Capacity should be >= serialize len.

            <length method="serialize len"/>
        </argument>
    </method>

    <method name="deserialize" is_static="1">
        Deserializes instance.

        <argument name="input" class="data">
            Data with serialized instance.
        </argument>
        <argument name="error" class="error" access="readwrite">
            Error context.
        </argument>

        <return class="self" access="disown">
            Deserialized instance
        </return>
    </method>

</class>

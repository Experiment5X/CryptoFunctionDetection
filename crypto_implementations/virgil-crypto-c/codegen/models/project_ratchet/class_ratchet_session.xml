<class name="ratchet session" context="internal">
    Class for ratchet session between 2 participants

    <require class="key info" scope="private" project="foundation"/>
    <require class="compound private key" scope="private" project="foundation"/>
    <require class="hybrid private key" scope="private" project="foundation"/>
    <require class="private key" scope="private" project="foundation"/>
    <require class="compound public key" scope="private" project="foundation"/>
    <require class="hybrid public key" scope="private" project="foundation"/>
    <require class="public key" scope="private" project="foundation"/>
    <require class="raw public key" scope="private" project="foundation"/>
    <require class="raw private key" scope="private" project="foundation"/>

    <require class="key info" project="foundation"/>

    <require class="ratchet pb utils" scope="context"/>
    <require class="ratchet common" scope="public"/>
    <require class="ratchet common hidden" scope="context"/>
    <require class="ratchet xxdh" scope="private"/>

    <require module="buffer defs" scope="private" project="common"/>

    <require module="ratchet defs" scope="private"/>
    <require module="ratchet message defs" scope="private"/>
    <require module="ratchet typedefs" scope="context"/>
    <require module="ratchet skipped messages defs" scope="private"/>

    <require impl="ctr drbg" project="foundation" scope="private"/>

    <require header="vscr_RatchetSession.pb.h" scope="private"/>
    <require header="vscr_RatchetMessage.pb.h" scope="private"/>
    <require header="pb_decode.h" scope="private"/>
    <require header="pb_encode.h" scope="private"/>

    <require header="ed25519/ed25519.h" is_system="1" scope="private"/>

    <dependency name="rng" interface="random" project="foundation" has_observers="1">
        Random used to generate keys
    </dependency>

    <property name="key utils" class="ratchet key utils"/>
    <property name="xxdh" class="ratchet xxdh"/>
    <property name="ratchet" class="ratchet"/>

    <property name="is initiator" type="boolean"/>
    <property name="received first response" type="boolean"/>
    <property name="enable post quantum" type="boolean"/>
    <property name="sender identity key id" class="vscr_ratchet_key_id_t" is_reference="0" library="internal" access="readwrite"/>
    <property name="sender ephemeral public key first" class="vscr_ratchet_public_key_t" is_reference="0" library="internal" access="readwrite"/>
    <property name="receiver identity key id" class="vscr_ratchet_key_id_t" is_reference="0" library="internal" access="readwrite"/>
    <property name="receiver long term key id" class="vscr_ratchet_key_id_t" is_reference="0" library="internal" access="readwrite"/>
    <property name="receiver has one time key first" type="boolean" access="readwrite"/>
    <property name="receiver one time key id" class="vscr_ratchet_key_id_t" is_reference="0" library="internal" access="readwrite"/>

    <property name="encapsulated key 1" class="buffer" access="readwrite"/>
    <property name="encapsulated key 2" class="buffer" access="readwrite"/>
    <property name="encapsulated key 3" class="buffer" access="readwrite"/>
    <property name="decapsulated keys signature" class="buffer" access="readwrite"/>

    <method name="setup defaults">
        Setups default dependencies:
            - RNG: CTR DRBG

        <return enum="status"/>
    </method>

    <method name="initiate">
        Initiates session

        <argument name="sender identity private key" interface="private key" project="foundation">
            Sender identity private key
        </argument>
        <argument name="sender identity key id" class="data">
            Sender identity key id
        </argument>
        <argument name="receiver identity public key" interface="public key" project="foundation">
            Receiver identity public key
        </argument>
        <argument name="receiver identity key id" class="data">
            Sender identity key id
        </argument>
        <argument name="receiver long term public key" interface="public key" project="foundation" access="retain">
            Receiver long-term public key
        </argument>
        <argument name="receiver long term key id" class="data">
            Receiver long-term key id
        </argument>
        <argument name="receiver one time public key" interface="public key" project="foundation" access="retain">
            Receiver one-time public key (optional)
        </argument>
        <argument name="receiver one time key id" class="data">
            Receiver one-time key id
        </argument>
        <argument name="enable post quantum" type="boolean">
            Ephemeral keys will consist of curve25519 and round5 keys.
            Ephemeral keys without round5 key won't be accepted
        </argument>

        <return enum="status">
            Error
        </return>
    </method>

    <method name="initiate no one time key">
        Initiates session

        <argument name="sender identity private key" interface="private key" project="foundation">
            Sender identity private key
        </argument>
        <argument name="sender identity key id" class="data">
            Sender identity key id
        </argument>
        <argument name="receiver identity public key" interface="public key" project="foundation">
            Receiver identity public key
        </argument>
        <argument name="receiver identity key id" class="data">
            Sender identity key id
        </argument>
        <argument name="receiver long term public key" interface="public key" project="foundation" access="retain">
            Receiver long-term public key
        </argument>
        <argument name="receiver long term key id" class="data">
            Receiver long-term key id
        </argument>
        <argument name="enable post quantum" type="boolean">
            Ephemeral keys will consist of curve25519 and round5 keys.
            Ephemeral keys without round5 key won't be accepted
        </argument>

        <return enum="status">
            Error
        </return>
    </method>

    <method name="respond">
        Responds to session initiation

        <argument name="sender identity public key" interface="public key" project="foundation" access="retain">
            Sender identity public key
        </argument>
        <argument name="receiver identity private key" interface="private key" project="foundation">
            Receiver identity private key
        </argument>
        <argument name="receiver long term private key" interface="private key" project="foundation">
            Receiver long-term private key
        </argument>
        <argument name="receiver one time private key" interface="private key" project="foundation">
            Receiver one-time private key (optional)
        </argument>
        <argument name="message" class="ratchet message">
            Message received from initiator
        </argument>
        <argument name="enable post quantum" type="boolean">
            Ephemeral keys will consist of curve25519 and round5 keys.
            Ephemeral keys without round5 key won't be accepted
        </argument>

        <return enum="status">
            Error
        </return>
    </method>

    <method name="respond no one time key">
        Responds to session initiation

        <argument name="sender identity public key" interface="public key" project="foundation" access="retain">
            Sender identity public key
        </argument>
        <argument name="receiver identity private key" interface="private key" project="foundation">
            Receiver identity private key
        </argument>
        <argument name="receiver long term private key" interface="private key" project="foundation">
            Receiver long-term private key
        </argument>
        <argument name="message" class="ratchet message">
            Message received from initiator
        </argument>
        <argument name="enable post quantum" type="boolean">
            Ephemeral keys will consist of curve25519 and round5 keys.
            Ephemeral keys without round5 key won't be accepted
        </argument>

        <return enum="status">
            Error
        </return>
    </method>

    <method name="is initiator">
        Returns flag that indicates is this session was initiated or responded

        <return type="boolean">
            True is session was initiated, false if responded
        </return>
    </method>

    <method name="is pqc enabled">
        Returns flag that indicates if session is post-quantum

        <return type="boolean">
            True is session is pqc, false otherwise
        </return>
    </method>

    <method name="received first response">
        Returns true if at least 1 response was successfully decrypted, false - otherwise

        <return type="boolean">
            True if at least 1 response was successfully decrypted, false - otherwise
        </return>
    </method>

    <method name="receiver has one time public key">
        Returns true if receiver had one time public key

        <return type="boolean">
            True if receiver had one time public key
        </return>
    </method>

    <method name="encrypt">
        Encrypts data

        <argument name="plain text" class="data">
            Data to encrypt
            NOTE: Plain text should be less than allowed maximum value
        </argument>

        <argument name="error" class="error" access="readwrite">
            Error context to return error
        </argument>

        <return class="ratchet message" access="disown">
            Result message. Use serialize to send this over the wire.
        </return>
    </method>

    <method name="decrypt len">
        Calculates size of buffer sufficient to store decrypted message

        <argument name="message" class="ratchet message">
            Message to decrypt
        </argument>

        <return type="size">
            Size of buffer sufficient to store decrypted message
        </return>
    </method>

    <method name="decrypt">
        Decrypts message

        <argument name="message" class="ratchet message">
            Message to decrypt. Use deserialize to obtain message from data
        </argument>

        <argument name="plain text" class="buffer">
            Decrypted data

            <length method="decrypt len">
                <proxy argument="message" to="message"/>
            </length>
        </argument>

        <return enum="status">
            Error
        </return>
    </method>

    <method name="serialize">
        Serializes session to buffer

        <return class="buffer" access="disown">
            Serialized session
        </return>
    </method>

    <method name="deserialize" is_static="1">
        Deserializes session from buffer.
        NOTE: Deserialized session needs dependencies to be set. Check setup defaults

        <argument name="input" class="data">
            Serialized session data
        </argument>

        <argument name="error" class="error" access="readwrite">
            Error context to return error
        </argument>

        <return class="self" access="disown">
            Deserialized session.
            NOTE: Deserialized session needs dependencies to be set. Check setup defaults
        </return>
    </method>
</class>

<implementor name="virgil message info cms" is_default="1">
    Contain CMS based implementation of the class "message info" abd class "message info footer".

    <implementation name="message info der serializer">
        CMS based serialization of the class "message info".

        <interface name="message info serializer">
            VirgilMessageInfo ::= SEQUENCE {
                version INTEGER { v0(0), v1(1), v2(2), v(3)} DEFAULT v0,
                cmsContent ContentInfo, -- Imports from RFC 5652
                customParams [0] EXPLICIT VirgilCustomParams OPTIONAL,
                cipherKdf [1] EXPLICIT AlgorithmIdentifier OPTIONAL,
                footerInfo [2] EXPLICIT VirgilFooterInfo OPTIONAL,
                cipherPadding [3] EXPLICIT AlgorithmIdentifier OPTIONAL
            }

            version is the syntax version number. The appropriate value
            depends on cipherKdf and footerInfo. The version MUST be
            assigned as follows:
                IF (cipherPadding is present)
                THEN version MUST be 3
                ELSE
                    IF (cipherKdf is present) AND
                        (footerInfo is present)
                    THEN version MUST be 2
                    ELSE
                        IF (cipherKdf is present)
                        THEN version MUST be 1
                        ELSE version MUST be 0
            <constant name="prefix len" value="32"/>
        </interface>

        <interface name="message info footer serializer">
            VirgilMessageInfoFooter ::= SEQUENCE {
                version INTEGER { v0(0) } DEFAULT v0,
                signerInfos [0] EXPLICIT VirgilSignerInfos OPTIONAL,
            }
        </interface>

        <require enum="asn1 tag"/>
        <require class="asn1rd"/>
        <require class="asn1wr"/>
        <require class="alg info der serializer"/>
        <require class="alg info der deserializer"/>
        <require class="oid"/>
        <require module="message info custom params internal"/>

        <require module="buffer defs" project="common"/>
        <require header="mbedtls/asn1.h"/>

        <dependency name="asn1 reader" interface="asn1 reader" has_observers="1"/>
        <dependency name="asn1 writer" interface="asn1 writer" has_observers="1"/>

        <context>
            <property name="alg info serializer" class="alg info der serializer"/>
            <property name="alg info deserializer" class="alg info der deserializer"/>
        </context>

        <method name="setup defaults" declaration="public">
            Setup predefined values to the uninitialized class dependencies.
        </method>

        <method name="serialized custom params len" is_const="1">
            Return size in bytes enough to hold serialized custom params.

            <argument name="custom params" class="message info custom params"/>

            <return type="size"/>
        </method>

        <method name="serialize custom params">
            VirgilCustomParams ::= SET SIZE (1..MAX) OF KeyValue

            KeyValue ::= SEQUENCE {
                key Key,
                val Value
            }

            Key ::= UTF8String

            Value ::= CHOICE {
                int [0] EXPLICIT INTEGER,
                str [1] EXPLICIT UTF8String,
                data [2] EXPLICIT OCTET STRING
            }

            <argument name="custom params" class="message info custom params"/>

            <return type="size"/>
        </method>

        <method name="serialized footer info len" is_const="1">
            Return size in bytes enough to hold serialized footer info.

            VirgilFooterInfo ::= SEQUENCE {
                version INTEGER { v0(0) },
                dataSize INTEGER,
                signedDataInfo [0] EXPLICIT VirgilSignedDataInfo OPTIONAL
            }

            <argument name="footer info" class="footer info"/>

            <return type="size"/>
        </method>

        <method name="serialize footer info">
            Serialize footer info.

            VirgilFooterInfo ::= SEQUENCE {
                version INTEGER { v0(0) },
                dataSize INTEGER,
                signedDataInfo [0] EXPLICIT VirgilSignedDataInfo OPTIONAL
            }

            <argument name="footer info" class="footer info"/>

            <return type="size"/>
        </method>

        <method name="serialized signed data info len" is_const="1" scope="internal" visibility="private">
            Return size in bytes enough to hold serialized signed data info.

            VirgilSignedDataInfo ::= SEQUENCE {
                version INTEGER { v0(0) } DEFAULT v0,
                digestAlgorithm AlgorithmIdentifier
            }

            <argument name="signed data info" class="signed data info"/>

            <return type="size"/>
        </method>

        <method name="serialize signed data info" scope="internal" visibility="private">
            Serialized signed data info.

            VirgilSignedDataInfo ::= SEQUENCE {
                version INTEGER { v0(0) } DEFAULT v0,
                digestAlgorithm AlgorithmIdentifier
            }

            <argument name="signed data info" class="signed data info"/>
            <argument name="out" class="buffer"/>
        </method>

        <method name="serialize signed data info internal">
            Serialized signed data info.

            VirgilSignedDataInfo ::= SEQUENCE {
                version INTEGER { v0(0) } DEFAULT v0,
                digestAlgorithm AlgorithmIdentifier
            }

            <argument name="signed data info" class="signed data info"/>

            <return type="size"/>
        </method>

        <method name="serialized key recipient info len" is_const="1">
            <argument name="key recipient info" class="key recipient info"/>

            <return type="size"/>
        </method>

        <method name="serialize key recipient info">
            KeyTransRecipientInfo ::= SEQUENCE {
                version CMSVersion, -- always set to 0 or 2
                rid RecipientIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey }

            RecipientIdentifier ::= CHOICE {
                issuerAndSerialNumber IssuerAndSerialNumber,
                subjectKeyIdentifier [0] SubjectKeyIdentifier }

            SubjectKeyIdentifier ::= OCTET STRING

            EncryptedKey ::= OCTET STRING

            <argument name="key recipient info" class="key recipient info"/>

            <return type="size"/>
        </method>

        <method name="serialized password recipient info len" is_const="1">
            <argument name="password recipient info" class="password recipient info"/>

            <return type="size"/>
        </method>

        <method name="serialize password recipient info">
            PasswordRecipientInfo ::= SEQUENCE {
                version CMSVersion, -- Always set to 0
                keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                           OPTIONAL, -- not used
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }

            <argument name="password recipient info" class="password recipient info"/>

            <return type="size"/>
        </method>

        <method name="serialized recipient infos len" is_const="1">
            <argument name="message info" class="message info"/>

            <return type="size"/>
        </method>

        <method name="serialize recipient infos">
            RecipientInfos ::= SET SIZE (1..MAX) OF RecipientInfo

            RecipientInfo ::= CHOICE {
                ktri KeyTransRecipientInfo,
                kari [1] KeyAgreeRecipientInfo, -- not supported
                kekri [2] KEKRecipientInfo, -- not supported
                pwri [3] PasswordRecipientInfo,
                ori [4] OtherRecipientInfo -- not supported
            }

            <argument name="message info" class="message info"/>

            <return type="size"/>
        </method>

        <method name="serialized encrypted content info len" is_const="1">
            <argument name="message info" class="message info"/>

            <return type="size"/>
        </method>

        <method name="serialize encrypted content info">
            EncryptedContentInfo ::= SEQUENCE {
                contentType ContentType, -- always PKCS#7 'data' OID
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL -- not used
            }

            ContentType ::= OBJECT IDENTIFIER
            ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
            EncryptedContent ::= OCTET STRING

            <argument name="message info" class="message info"/>

            <return type="size"/>
        </method>

        <method name="serialized enveloped data len" is_const="1">
            <argument name="message info" class="message info"/>

            <return type="size"/>
        </method>

        <method name="serialize enveloped data">
            EnvelopedData ::= SEQUENCE {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL, -- not used
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL -- not used
            }

            CMSVersion ::= INTEGER { v0(0), v1(1), v2(2), v3(3), v4(4), v5(5) }

            <argument name="message info" class="message info"/>

            <return type="size"/>
        </method>

        <method name="serialized cms content info len" is_const="1">
            <argument name="message info" class="message info"/>

            <return type="size"/>
        </method>

        <method name="serialize cms content info ">
            ContentInfo ::= SEQUENCE {
                contentType ContentType,
                content [0] EXPLICIT ANY DEFINED BY contentType
            }

            ContentType ::= OBJECT IDENTIFIER

            <argument name="message info" class="message info"/>

            <return type="size"/>
        </method>

        <method name="serialized signer infos len" is_const="1">
            VirgilSignerInfos ::= SET SIZE (1..MAX) OF VirgilSignerInfo

            <argument name="message info footer" class="message info footer"/>

            <return type="size"/>
        </method>

        <method name="serialize signer infos">
            VirgilSignerInfos ::= SET SIZE (1..MAX) OF VirgilSignerInfo

            <argument name="message info footer" class="message info footer"/>

            <return type="size"/>
        </method>

        <method name="serialized signer info len" is_const="1">
            VirgilSignerInfo ::= SEQUENCE {
                version INTEGER { v0(0) } DEFAULT v0,
                signerIdentifier VirgilSignerIdentifier,
                signerAlgorithm VirgilSignerAlgorithm,
                signature VirgilSignatureValue
            }

            VirgilSignerIdentifier ::= OCTET STRING

            VirgilSignerAlgorithm ::= AlgorithmIdentifier

            VirgilSignatureValue ::= OCTET STRING

            <argument name="signer info" class="signer info"/>

            <return type="size"/>
        </method>

        <method name="serialize signer info">
            VirgilSignerInfo ::= SEQUENCE {
                version INTEGER { v0(0) } DEFAULT v0,
                signerIdentifier VirgilSignerIdentifier,
                signerAlgorithm VirgilSignerAlgorithm,
                signature VirgilSignatureValue
            }

            VirgilSignerIdentifier ::= OCTET STRING

            VirgilSignerAlgorithm ::= AlgorithmIdentifier

            VirgilSignatureValue ::= OCTET STRING

            <argument name="signer info" class="signer info"/>

            <return type="size"/>
        </method>

        <method name="deserialize custom params">
            VirgilCustomParams ::= SET SIZE (1..MAX) OF KeyValue

            KeyValue ::= SEQUENCE {
                key Key,
                val Value
            }

            Key ::= UTF8String

            Value ::= CHOICE {
                int [0] EXPLICIT INTEGER,
                str [1] EXPLICIT UTF8String,
                data [2] EXPLICIT OCTET STRING
            }

            <argument name="custom params" class="message info custom params" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize cipher kdf">
            AlgorithmIdentifier

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize cipher padding">
            AlgorithmIdentifier

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize footer info">
            VirgilFooterInfo ::= SEQUENCE {
                version INTEGER { v0(0) },
                dataSize INTEGER,
                signedDataInfo [0] EXPLICIT VirgilSignedDataInfo OPTIONAL
            }

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize signed data info">
            VirgilSignedDataInfo ::= SEQUENCE {
                version INTEGER { v0(0) },
                digestAlgorithm AlgorithmIdentifier
            }

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize key recipient info">
            KeyTransRecipientInfo ::= SEQUENCE {
                version CMSVersion, -- always set to 0 or 2
                rid RecipientIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey }

            RecipientIdentifier ::= CHOICE {
                issuerAndSerialNumber IssuerAndSerialNumber,
                subjectKeyIdentifier [0] SubjectKeyIdentifier }

            SubjectKeyIdentifier ::= OCTET STRING

            EncryptedKey ::= OCTET STRING

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize password recipient info">
            PasswordRecipientInfo ::= SEQUENCE {
                version CMSVersion, -- Always set to 0
                keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                           OPTIONAL, -- not used
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize recipient infos">
            RecipientInfos ::= SET SIZE (1..MAX) OF RecipientInfo

            RecipientInfo ::= CHOICE {
                ktri KeyTransRecipientInfo,
                kari [1] KeyAgreeRecipientInfo, -- not supported
                kekri [2] KEKRecipientInfo, -- not supported
                pwri [3] PasswordRecipientInfo,
                ori [4] OtherRecipientInfo -- not supported
            }

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize encrypted content info">
            EncryptedContentInfo ::= SEQUENCE {
                contentType ContentType, -- always PKCS#7 'data' OID
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL -- not used
            }

            ContentType ::= OBJECT IDENTIFIER
            ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
            EncryptedContent ::= OCTET STRING

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize enveloped data">
            EnvelopedData ::= SEQUENCE {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL, -- not used
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL -- not used
            }

            CMSVersion ::= INTEGER { v0(0), v1(1), v2(2), v3(3), v4(4), v5(5) }

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize cms content info">
            ContentInfo ::= SEQUENCE {
                contentType ContentType,
                content [0] EXPLICIT ANY DEFINED BY contentType
            }

            ContentType ::= OBJECT IDENTIFIER

            <argument name="message info" class="message info" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize signer infos">
            VirgilSignerInfos ::= SET SIZE (1..MAX) OF VirgilSignerInfo

            <argument name="message info footer" class="message info footer" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>

        <method name="deserialize signer info">
            VirgilSignerInfo ::= SEQUENCE {
                version INTEGER { v0(0) } DEFAULT v0,
                signerIdentifier VirgilSignerIdentifier,
                signerAlgorithm VirgilSignerAlgorithm,
                signature VirgilSignatureValue
            }

            VirgilSignerIdentifier ::= OCTET STRING

            VirgilSignerAlgorithm ::= AlgorithmIdentifier

            VirgilSignatureValue ::= OCTET STRING

            <argument name="message info footer" class="message info footer" access="readwrite"/>
            <argument name="error" class="error" access="readwrite" />
        </method>
    </implementation>
</implementor>

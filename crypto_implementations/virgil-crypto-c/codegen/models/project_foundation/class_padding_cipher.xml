<class name="padding cipher" scope="internal">
    Wraps any symmetric cipher algorithm to add padding to plaintext
    to prevent message guessing attacks based on a ciphertext length.

    <require header="pb_decode.h" scope="private"/>
    <require header="pb_encode.h" scope="private"/>

    <dependency name="cipher" interface="cipher"/>
    <dependency name="padding" interface="padding"/>
    <property name="padding buffer" class="buffer"/>

    <!-- start: duplicate interface cipher  -->
    <method name="start encryption">
        Start sequential encryption.
    </method>

    <method name="start decryption">
        Start sequential decryption.
    </method>

    <method name="update">
        Process encryption or decryption of the given data chunk.

        <argument name="data" class="data"/>
        <argument name="out" class="buffer">
            <length method="out len">
                <proxy argument="data" to="data len" cast="data_length"/>
            </length>
        </argument>
    </method>

    <method name="out len">
        Return buffer length required to hold an output of the methods
        "update" or "finish" in an current mode.
        Pass zero length to define buffer length of the method "finish".

        <argument name="data len" type="size"/>
        <return type="size"/>
    </method>

    <method name="encrypted out len" is_const="1">
        Return buffer length required to hold an output of the methods
        "update" or "finish" in an encryption mode.
        Pass zero length to define buffer length of the method "finish".

        <argument name="data len" type="size"/>
        <return type="size"/>
    </method>

    <method name="decrypted out len" is_const="1">
        Return buffer length required to hold an output of the methods
        "update" or "finish" in an decryption mode.
        Pass zero length to define buffer length of the method "finish".

        <argument name="data len" type="size"/>
        <return type="size"/>
    </method>

    <method name="finish">
        Accomplish encryption or decryption process.

        <argument name="out" class="buffer">
            <length method="out len">
                <proxy constant="0" to="data len"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>
    <!-- end: duplicate interface cipher  -->

    <method name="reset buffer" is_static="1" declaration="private">
        Reset buffer. Ensures capacity is enough.

        <argument name="buffer" class="buffer"/>
        <argument name="capacity" type="size"/>
    </method>

    <method name="finish encryption" declaration="private">
        <argument name="out" class="buffer"/>

        <return enum="status"/>
    </method>

    <method name="finish decryption" declaration="private">
        <argument name="out" class="buffer"/>

        <return enum="status"/>
    </method>
</class>

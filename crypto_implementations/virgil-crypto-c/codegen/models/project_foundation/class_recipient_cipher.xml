<class name="recipient cipher">
    This class provides hybrid encryption algorithm that combines symmetric
    cipher for data encryption and asymmetric cipher and password based
    cipher for symmetric key encryption.

    <require interface="alg"/>
    <require interface="alg info"/>
    <require interface="cipher auth"/>
    <require interface="decrypt"/>
    <require interface="encrypt"/>
    <require interface="kdf"/>
    <require interface="key cipher"/>
    <require interface="key signer"/>
    <require interface="private key"/>
    <require interface="public key"/>
    <require class="message info der serializer"/>
    <require class="key recipient list"/>
    <require class="aes256 gcm"/>
    <require class="ctr drbg"/>
    <require class="alg factory"/>
    <require class="key alg factory"/>
    <require class="sha512"/>
    <require class="hkdf"/>
    <require impl="random padding"/>
    <require module="message info der serializer internal"/>

    <dependency name="random" interface="random"/>
    <dependency name="encryption cipher" interface="cipher"/>
    <dependency name="encryption padding" interface="padding"/>
    <dependency name="padding params" class="padding params"/>
    <dependency name="signer hash" interface="hash"/>

    <property name="key recipients" class="key recipient list"/>
    <property name="signers" class="signer list"/>
    <property name="master key" class="buffer"/>
    <property name="derived keys" class="buffer"/>
    <property name="data digest" class="buffer"/>
    <property name="decryption recipient id" class="buffer"/>
    <property name="decryption recipient key" interface="private key"/>
    <property name="decryption password" class="buffer"/>
    <property name="decryption cipher" interface="cipher"/>
    <property name="decryption padding" interface="padding"/>
    <property name="padding cipher" impl="padding cipher"/>
    <property name="verifier hash" interface="hash"/>
    <property name="message info" class="message info"/>
    <property name="message info der serializer" impl="message info der serializer"/>
    <property name="message info buffer" class="buffer"/>
    <property name="message info footer" class="message info footer"/>
    <property name="message info footer enc" class="buffer"/>
    <property name="message info expected len" type="size"/>
    <property name="processed encrypted data len" type="size"/>
    <property name="decryption state" enum="recipient cipher decryption state"/>
    <property name="is signed operation" type="boolean"/>

    <method name="has key recipient" is_const="1">
        Return true if a key recipient with a given id has been added.
        Note, operation has O(N) time complexity.

        <argument name="recipient id" class="data"/>

        <return type="boolean"/>
    </method>

    <method name="add key recipient">
        Add recipient defined with id and public key.

        <argument name="recipient id" class="data"/>
        <argument name="public key" interface="public key" access="retain"/>
    </method>

    <method name="clear recipients">
        Remove all recipients.
    </method>

    <method name="add signer">
        Add identifier and private key to sign initial plain text.
        Return error if the private key can not sign.

        <argument name="signer id" class="data"/>
        <argument name="private key" interface="private key" access="retain"/>

        <return enum="status"/>
    </method>

    <method name="clear signers">
        Remove all signers.
    </method>

    <method name="custom params">
        Provide access to the custom params object.
        The returned object can be used to add custom params or read it.

        <return class="message info custom params" access="readwrite"/>
    </method>

    <method name="start encryption">
        Start encryption process.

        <return enum="status"/>
    </method>

    <method name="start signed encryption">
        Start encryption process with known plain text size.

        Precondition: At least one signer should be added.
        Note, store message info footer as well.

        <argument name="data size" type="size"/>

        <return enum="status"/>
    </method>

    <method name="message info len" is_const="1">
        Return buffer length required to hold message info returned by the
        "pack message info" method.
        Precondition: all recipients and custom parameters should be set.

        <return type="size"/>
    </method>

    <method name="pack message info">
        Return serialized message info to the buffer.

        Precondition: this method should be called after "start encryption".
        Precondition: this method should be called before "finish encryption".

        Note, store message info to use it for decryption process,
        or place it at the encrypted data beginning (embedding).

        Return message info - recipients public information,
        algorithm information, etc.

        <argument name="message info" class="buffer">
            <length method="message info len"/>
        </argument>
    </method>

    <method name="encryption out len">
        Return buffer length required to hold output of the method
        "process encryption" and method "finish" during encryption.

        <argument name="data len" type="size"/>

        <return type="size"/>
    </method>

    <method name="process encryption">
        Process encryption of a new portion of data.

        <argument name="data" class="data"/>
        <argument name="out" class="buffer">
            <length method="encryption out len">
                <proxy argument="data" to="data len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>

    <method name="finish encryption">
        Accomplish encryption.

        <argument name="out" class="buffer">
            <length method="encryption out len">
                <proxy constant="0" to="data len"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>

    <method name="start decryption with key">
        Initiate decryption process with a recipient private key.
        Message Info can be empty if it was embedded to encrypted data.

        <argument name="recipient id" class="data"/>
        <argument name="private key" interface="private key" access="retain"/>
        <argument name="message info" class="data"/>

        <return enum="status"/>
    </method>

    <method name="start verified decryption with key">
        Initiate decryption process with a recipient private key.
        Message Info can be empty if it was embedded to encrypted data.
        Message Info footer can be empty if it was embedded to encrypted data.
        If footer was embedded, method "start decryption with key" can be used.

        <argument name="recipient id" class="data"/>
        <argument name="private key" interface="private key" access="retain"/>
        <argument name="message info" class="data"/>
        <argument name="message info footer" class="data"/>

        <return enum="status"/>
    </method>

    <method name="decryption out len">
        Return buffer length required to hold output of the method
        "process decryption" and method "finish" during decryption.

        <argument name="data len" type="size"/>

        <return type="size"/>
    </method>

    <method name="process decryption">
        Process with a new portion of data.
        Return error if data can not be encrypted or decrypted.

        <argument name="data" class="data"/>
        <argument name="out" class="buffer">
            <length method="decryption out len">
                <proxy argument="data" to="data len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>

    <method name="finish decryption">
        Accomplish decryption.

        <argument name="out" class="buffer">
            <length method="decryption out len">
                <proxy constant="0" to="data len"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>

    <method name="is data signed" is_const="1">
        Return true if data was signed by a sender.

        Precondition: this method should be called after "finish decryption".

        <return type="boolean"/>
    </method>

    <method name="signer infos" is_const="1">
        Return information about signers that sign data.

        Precondition: this method should be called after "finish decryption".
        Precondition: method "is data signed" returns true.

        <return class="signer info list"/>
    </method>

    <method name="verify signer info">
        Verify given cipher info.

        <argument name="signer info" class="signer info"/>
        <argument name="public key" interface="public key"/>

        <return type="boolean"/>
    </method>

    <method name="configure decryption cipher" declaration="private">
        Configure decryption symmetric cipher with given key and
        nonce that is restored from the message info or derived from the key.

        Note, this method change decryption state.

        <argument name="decryption key" class="data"/>

        <return enum="status"/>
    </method>

    <method name="decrypt data encryption key with password" declaration="private">
        Decrypt data encryption key with a password.

        <return enum="status"/>
    </method>

    <method name="decrypt data encryption key with private key" declaration="private">
        Decrypt data encryption key with a private key.

        <return enum="status"/>
    </method>

    <method name="decrypt data encryption key" declaration="private">
        Decrypt data encryption key and configure underlying cipher.

        <return enum="status"/>
    </method>

    <method name="unpack message info" declaration="private">
        Deserialize given message info from the given data or extracted data.

        <argument name="message info" class="data"/>

        <return enum="status"/>
    </method>

    <method name="unpack message info footer" declaration="private">
        Deserialize given message info footer from the given data or extracted data.

        <return enum="status"/>
    </method>

    <method name="message info footer len" is_const="1">
        Return buffer length required to hold message footer returned by the
        "pack message footer" method.

        Precondition: this method should be called after "finish encryption".

        <return type="size"/>
    </method>

    <method name="pack message info footer">
        Return serialized message info footer to the buffer.

        Precondition: this method should be called after "finish encryption".

        Note, store message info to use it for verified decryption process,
        or place it at the encrypted data ending (embedding).

        Return message info footer - signers public information, etc.

        <argument name="out" class="buffer">
            <length method="message info footer len"/>
        </argument>

        <return enum="status"/>
    </method>

    <method name="extract message info" declaration="private">
        <argument name="data" class="data"/>

        <return enum="status"/>
    </method>

    <method name="set cipher auth data" declaration="private">
        For signed encryption set serialized footer info as
        cipher additional data for AEAD ciphers.

        <argument name="cipher" interface="cipher" access="readwrite"/>
    </method>

    <method name="accomplish signed encryption" declaration="private">
        Sign data digest.
        Populate message info footer.
        Encrypt message info footer.

        <return enum="status"/>
    </method>

    <method name="accomplish verified decryption" declaration="private">
        Calculate data digest.
    </method>

    <method name="derive decryption cipher keys and nonces" declaration="private">
        Derive keys and nonces from given master.

        <argument name="master key" class="data"/>
    </method>

    <method name="configure verifier hash" declaration="private">

    </method>

    <method name="data derived key" is_const="1" declaration="private">
        <argument name="cipher" interface="cipher"/>
        <return class="data"/>
    </method>

    <method name="data derived nonce" is_const="1" declaration="private">
        <argument name="cipher" interface="cipher"/>
        <return class="data"/>
    </method>

    <method name="footer derived key" is_const="1" declaration="private">
        <argument name="cipher" interface="cipher"/>
        <return class="data"/>
    </method>

    <method name="footer derived nonce" is_const="1" declaration="private">
        <argument name="cipher" interface="cipher"/>
        <return class="data"/>
    </method>

    <method name="setup encryption defaults" declaration="private">
        Setup default algorithms required for encryption.

        <return enum="status"/>
    </method>

    <method name="configure encryption cipher" declaration="private">
        <return enum="status"/>
    </method>

    <method name="configure kdf feeded encryption cipher" declaration="private">
        <return enum="status"/>
    </method>

    <method name="encrypt cipher key for recipients" declaration="private">
        <return enum="status"/>
    </method>

    <method name="filter message info footer" declaration="private">
        <argument name="data" class="data"/>

        <return class="data"/>
    </method>

    <method name="decrypt chunk" declaration="private">
        <argument name="data" class="data"/>
        <argument name="out" class="buffer"/>
    </method>

    <method name="update message info for encryption" declaration="private">
        Add information related to encryption to a message info.

        <return enum="status"/>
    </method>

    <method name="configure padding cipher" declaration="private">
        Configure padding cipher with given padding and cipher.

        <argument name="padding" interface="padding" access="readwrite"/>
        <argument name="cipher" interface="cipher" access="readwrite"/>
    </method>
</class>

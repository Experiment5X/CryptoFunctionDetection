<class name="phe client" context="internal">
    Class for client-side PHE crypto operations.
    This class is thread-safe in case if .(c_global_macros_multi_threading) defined.

    <require class="phe common" scope="public"/>
    <require impl="ctr drbg" project="foundation" scope="private"/>

    <require header="PHEModels.pb.h" scope="private"/>
    <require header="pb_decode.h" scope="private"/>
    <require header="pb_encode.h" scope="private"/>

    <require module="buffer defs" scope="private" project="common"/>
    <require module="mbedtls bridge random" scope="private" project="foundation"/>

    <dependency name="random" interface="random" project="foundation" has_observers="1">
        Random used for key generation, proofs, etc.
    </dependency>
    <dependency name="operation random" interface="random" project="foundation" has_observers="1">
        Random used for crypto operations to make them const-time
    </dependency>

    <property name="simple swu" class="simple swu" project="foundation"/>
    <property name="phe hash" class="phe hash" access="readwrite"/>
    <property name="proof verifier" class="phe proof verifier"/>
    <property name="group" class="mbedtls_ecp_group" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="server public key" type="byte" access="readwrite">
        <array length="fixed" length_constant=".(class_phe_common_constant_phe_public_key_length)"/>
    </property>
    <property name="keys are set" type="boolean"/>
    <property name="y" class="mbedtls_mpi" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="y inv" class="mbedtls_mpi" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="minus y" class="mbedtls_mpi" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="X" class="mbedtls_ecp_point" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="one" class="mbedtls_mpi" library="mbedtls" access="readwrite" is_reference="0"/>
    <property name="minus one" class="mbedtls_mpi" library="mbedtls" access="readwrite" is_reference="0"/>

    <method name="setup defaults">
        Setups dependencies with default values.

        <return enum="status">
            - vsce_status_ERROR_RNG_FAILED in case rng failed
        </return>
    </method>

    <method name="set keys">
        Sets client private and server public key
        Call this method before any other methods except `update enrollment record` and `generate client private key`
        This function should be called only once

        <argument name="client private key" class="data">
            Client's private key
            Use `generate client private key` to generate this key, or generate NIST P-256 private key yourself
        </argument>
        <argument name="server public key" class="data">
            Server's public key. Get it from your phe service
        </argument>

        <return enum="status">
            - vsce_status_ERROR_INVALID_PRIVATE_KEY if private key is invalid
            - vsce_status_ERROR_INVALID_PUBLIC_KEY if public key is invalid
        </return>
    </method>

    <method name="generate client private key">
        Generates client private key

        <argument name="client private key" class="buffer" access="writeonly">
            Client's private key
            Buffer size should be >= .(class_phe_common_constant_phe_private_key_length)

            <length constant="phe private key length" class="phe common"/>
        </argument>

        <return enum="status">
            - vsce_status_ERROR_RNG_FAILED in case rng failed
        </return>
    </method>

    <method name="enrollment record len">
        Buffer size needed to fit EnrollmentRecord

        <return type="size">
            Buffer size needed to fit EnrollmentRecord
        </return>
    </method>

    <method name="enroll account">
        Uses fresh EnrollmentResponse from PHE server (see get enrollment func) and user's password (or its hash) to create
        a new EnrollmentRecord which is then supposed to be stored in a database for further authentication
        Also generates a random seed which then can be used to generate symmetric or private key to protect user's data

        <argument name="enrollment response" class="data">
            EnrollmentResponse receiver from PHE server
        </argument>
        <argument name="password" class="data">
            User's password (or its hash)
        </argument>
        <argument name="enrollment record" class="buffer" access="writeonly">
            EnrollmentRecord which should be stored in a database for further authentication.
            Buffer size should be >= enrollment record len

            <length method="enrollment record len"/>
        </argument>
        <argument name="account key" class="buffer" access="writeonly">
            Random seed which can be used to generate symmetric or private key to protect user's data
            Buffer size should be >= .(class_phe_common_constant_phe_account_key_length)

            <length constant="phe account key length" class="phe common"/>
        </argument>

        <return enum="status">
            - vsce_status_ERROR_PROTOBUF_DECODE_FAILED if input model is invalid
            - vsce_status_ERROR_INVALID_PUBLIC_KEY if input points are invalid
            - vsce_status_ERROR_INVALID_SUCCESS_PROOF if provided proof is not valid
            - vsce_status_ERROR_RNG_FAILED in case rng failed
        </return>
    </method>

    <method name="verify password request len">
        Buffer size needed to fit VerifyPasswordRequest

        <return type="size">
            Buffer size needed to fit VerifyPasswordRequest
        </return>
    </method>

    <method name="create verify password request">
        Creates a request for further password verification at the PHE server side.

        <argument name="password" class="data">
            User's password (or its hash)
        </argument>
        <argument name="enrollment record" class="data">
            EnrollmentRecord created and stored at enroll account step
        </argument>
        <argument name="verify password request" class="buffer" access="writeonly">
            VerifyPasswordRequest that should be then passed to PHE server
            Buffer size should be >= verify password request len

            <length method="verify password request len"/>
        </argument>

        <return enum="status">
            - vsce_status_ERROR_PROTOBUF_DECODE_FAILED if input model is invalid
            - vsce_status_ERROR_INVALID_PUBLIC_KEY if input points are invalid
        </return>
    </method>

    <method name="check response and decrypt">
        Verifies PHE server's answer
        If login succeeded, extracts account key
        If login failed account key will be empty

        <argument name="password" class="data">
            User's password (or its hash)
        </argument>
        <argument name="enrollment record" class="data">
            EnrollmentRecord created and stored at enroll account step
        </argument>
        <argument name="verify password response" class="data">
            VerifyPasswordResponse obtained from PHE server
        </argument>
        <argument name="account key" class="buffer" access="writeonly">
            Random seed which can be used to generate symmetric or private key to protect user's data
            Buffer size should be >= .(class_phe_common_constant_phe_account_key_length)

            <length constant="phe account key length" class="phe common"/>
        </argument>

        <return enum="status">
            - vsce_status_ERROR_PROTOBUF_DECODE_FAILED if input model is invalid
            - vsce_status_ERROR_INVALID_PUBLIC_KEY if input points are invalid
            - vsce_status_ERROR_INVALID_PRIVATE_KEY if private key is invalid
            - vsce_status_ERROR_INVALID_SUCCESS_PROOF if provided proof is not valid
            - vsce_status_ERROR_INVALID_FAIL_PROOF if provided proof is not valid
        </return>
    </method>

    <method name="rotate keys">
        Updates client's private key and server's public key using server's update token
        Use output values to instantiate new client instance with new keys

        <argument name="update token" class="data">
            Update token provided by PHE server
        </argument>
        <argument name="new client private key" class="buffer" access="writeonly">
            New client private key
            Buffer size should be >= .(class_phe_common_constant_phe_private_key_length)

            <length constant="phe private key length" class="phe common"/>
        </argument>
        <argument name="new server public key" class="buffer" access="writeonly">
            New PHE server public key
            Buffer size should be >= .(class_phe_common_constant_phe_public_key_length)

            <length constant="phe public key length" class="phe common"/>
        </argument>

        <return enum="status">
            - vsce_status_ERROR_PROTOBUF_DECODE_FAILED if input model is invalid
            - vsce_status_ERROR_INVALID_PRIVATE_KEY if private key is invalid
        </return>
    </method>

    <method name="update enrollment record">
        Updates EnrollmentRecord using server's update token

        <argument name="enrollment record" class="data">
            EnrollmentRecord created and stored at enroll account step
        </argument>
        <argument name="update token" class="data">
            Update token provided by PHE server
        </argument>
        <argument name="new enrollment record" class="buffer" access="writeonly">
            Updated EnrollmentRecord
            Buffer size should be >= enrollment record len

            <length method="enrollment record len"/>
        </argument>

        <return enum="status">
            - vsce_status_ERROR_PROTOBUF_DECODE_FAILED if input model is invalid
            - vsce_status_ERROR_INVALID_PUBLIC_KEY if input points are invalid
            - vsce_status_ERROR_INVALID_PRIVATE_KEY if private key is invalid
        </return>
    </method>

    <method name="get op group" declaration="private">
        <return class="mbedtls_ecp_group" library="mbedtls" access="readwrite"/>
    </method>

    <method name="free op group" declaration="private" is_static="1">
        <argument name="op group" class="mbedtls_ecp_group" library="mbedtls" access="readwrite"/>
    </method>
</class>
